# Build Upload Change line no.148
# Upload on internal testing : fastlane internal
# Upload on close testing : fastlane closed
# Upload on production : fastlane production

# Workflow Name
name: React Native CI/CD Workflow

on:
  push:
    branches:
      - main
  pull_request:
    types:
      - closed
    branches:
      - main

jobs:
  lint-and-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Set up JDK 17
        uses: actions/setup-java@v2
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '22.9.0'

      - name: Cache Node Modules
        uses: actions/cache@v3
        with:
          path: node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install Dependencies
        run: npm install

      - name: Run Prettier
        run: npm run format

      - name: Run ESLint
        run: npm run lint:fix

      - name: Debug CI Context
        run: |
          pwd
          cat android/fastlane/playstore-credentials.json || echo "‚ùå Credentials File Not Found!"
          ls android/app/ | grep keystore || echo "‚ùå Keystore not found"
          ls -R android

      - name: Send Discord Notification on Failure
        if: failure()
        run: |
          curl -H "Content-Type: application/json" \
               -X POST \
               -d '{"content": "üö® CI/CD Build Failed! Error: Testing/Linting Failed!"}' \
               ${{ secrets.DISCORD_WEBHOOK_URL }}

      - name: Send Discord Notification on Success
        if: success()
        run: |
          curl -H "Content-Type: application/json" \
               -X POST \
               -d '{"content": "‚úÖ Testing Passed"}' \
               ${{ secrets.DISCORD_WEBHOOK_URL }}

  deploy:
    if: github.event.pull_request.merged == true && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    needs: lint-and-test
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Set up JDK 17
        uses: actions/setup-java@v2
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '22.9.0'

      - name: Cache Node Modules
        uses: actions/cache@v3
        with:
          path: node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install Dependencies
        run: npm install

      - name: Build Android App
        run: |
          cd android
          ./gradlew clean && cd ..
          npm run build
          rm -rf ./android/app/src/main/res/drawable-*
          rm -rf ./android/app/src/main/res/raw

      - name: Restore Keystore File
        run: |
          echo "${{ secrets.KEYSTORE_FILE }}" | base64 --decode > android/app/my-upload-key.keystore
          ls -la android/app/ | grep keystore || echo "‚ùå Keystore Not Found!"

      - name: Restore Play Store Credentials
        run: |
          mkdir -p android/fastlane
          echo "${{ secrets.PLAYSTORE_CREDENTIALS }}" | base64 --decode > android/fastlane/playstore-credentials.json
          ls -la android/fastlane/ | grep playstore-credentials.json || echo "‚ùå Play Store Credentials Not Found!"

      - name: Debug Files Before Build
        run: |
          pwd
          ls -la android/
          ls -la android/fastlane/
          ls -la android/app/
          cat android/app/my-upload-key.keystore || echo "‚ùå Keystore Not Found!"
        # cat android/fastlane/playstore-credentials.json || echo "‚ùå Credentials File Not Found!"

      - name: Install Fastlane
        run: sudo gem install fastlane -NV

      - name: Deploy to Google Play Store
        run: |
          cd android
          fastlane internal

      - name: Send Discord Notification on Failure
        if: failure()
        run: |
          curl -H "Content-Type: application/json" \
               -X POST \
               -d '{"content": "üö® Deployment Failed! Error: Fastlane Service Failed"}' \
               ${{ secrets.DISCORD_WEBHOOK_URL }}

      - name: Send Discord Notification on Success
        if: success()
        run: |
          curl -H "Content-Type: application/json" \
               -X POST \
               -d '{"content": "‚úÖ Deployed To Play Store üéâ!"}' \
               ${{ secrets.DISCORD_WEBHOOK_URL }}
