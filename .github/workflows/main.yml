# Work flow name
name: React Native CI/CD Workflow

# While push and pull request to main branch - that is when the workflow will be triggered
on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

# First Job: Lint and Test
jobs:
  lint-and-test:
    # Ubuntu-latest is virtual machine which provided by GitHub. Job are running on this machine.
    runs-on: ubuntu-latest

    steps:
      # Repo code pull into this machine
      - name: Checkout code
        uses: actions/checkout@v2

      # Install JDK17 install, Needs android & fastlane build.
      - name: Set up JDK 17
        uses: actions/setup-java@v2
        with:
          java-version: '17'
          distribution: 'temurin'

      # Install Node.js 22.9.0, for needed for build and install node modules
      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '22.9.0'

      # Cache node modules, so that it won't be installed every time
      - name: Cache Node.js modules
        uses: actions/cache@v3
        with:
          path: node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      # Install Node.js dependencies, according to (Package.json) file.
      - name: Install Node.js dependencies
        run: npm install

      # Code formatting using with prettier syntax
      - name: Run Prettier
        run: npm run format

      # Code linting using with eslint syntax
      - name: Run ESLint
        run: npm run lint:fix

      # Run unit tests using with jest syntax
      #   - name: Run Unit Tests
      #     run: npm run test

      # Run Detox tests using with detox syntax
      # - name: Run Detox tests
      #   uses: reactivecircus/android-emulator-runner@v2
      #   with:
      #     api-level: 3
      #     arch: x86_64
      #     avd-name: Pixel_6a_API_34
      #     force-avd-creation: false
      #     emulator-options: -no-snapshot-save -no-window -gpu swiftshader_indirect -noaudio -no-boot-anim -camera-back none -no-metrics
      #     disable-animations: false
      #     script: npm run detox:android:test:ci

      #  - name: Build Detox and Run E2E Tests
      #   run: |
      #     npm run detox:genymotion_cloud
      #     npm run detox:genymotion_cloud

      # Prefer to run localy e2e beacause it requires high computation and cost much on cloud services
      # If you have money go with Genymotion 0.05$ per minute😁

      # If any steps failed, it will stop the workflow and send a notification to Discord
      - name: Send Discord notification on failure
        if: failure()
        run: |
          curl -H "Content-Type: application/json" \
               -X POST \
               -d '{"content": "🚨 CI/CD Build Failed! Error logs: Testing / Linting / Prettier Failed!"}' \
               ${{ secrets.DISCORD_WEBHOOK_URL }}

      # If all steps passed, it will send a success notification to Discord
      - name: Send Discord notification on success
        if: success()
        run: |
          curl -H "Content-Type: application/json" \
               -X POST \
               -d '{"content": "✅ Testing Passed"}' \
               ${{ secrets.DISCORD_WEBHOOK_URL }}

  # Second Job: Deploy - This job is deployed job, needs to be run after the first job
  deploy:
    runs-on: ubuntu-latest
    needs: lint-and-test

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up JDK 17
        uses: actions/setup-java@v2
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '22.9.0'

      - name: Cache Node.js modules
        uses: actions/cache@v3
        with:
          path: node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install Node.js dependencies
        run: npm install

      # For the play-store, required keystore file must be added to the GitHub secrets
      - name: Restore Keystore File
        run: |
          echo "${{ secrets.PLAYSTORE_CREDENTIALS }}" | base64 --decode > android/playstore-credentials.json

      - name: Debug CI Context
        run: |
          pwd
          cat android/fastlane/playstore-credentials.json || echo "❌ Credentials file not found"
          ls android/app/ | grep keystore || echo "❌ Keystore not found"
          ls -R android

      - name: Install Fastlane
        run: sudo gem install fastlane -NV

      - name: Deploy to Google Play Store
        run: |
          echo "${{ secrets.PLAYSTORE_CREDENTIALS }}" | base64 --decode > android/fastlane/playstore-credentials.json
          cd android
          fastlane playstore

      - name: Send Discord notification on failure
        if: failure()
        run: |
          curl -H "Content-Type: application/json" \
               -X POST \
               -d '{"content": "🚨 Deployment Failed! Error logs:Fast Lane Service Failed"}' \
               ${{ secrets.DISCORD_WEBHOOK_URL }}

      - name: Send Discord notification on success
        if: success()
        run: |
          curl -H "Content-Type: application/json" \
               -X POST \
               -d '{"content": "✅ Deployed To Play Store 🎉!"}' \
               ${{ secrets.DISCORD_WEBHOOK_URL }}

      # - name: Email notification
      #   if: failure()
      #   uses: dawidd6/action-send-mail@v3
      #   with:
      #       server_address: smtp.gmail.com
      #       server_port: 465
      #       username: ${{ secrets.EMAIL_USERNAME }}
      #       password: ${{ secrets.EMAIL_PASSWORD }}
      #       subject: CI Pipeline Failure
      #       to: ${{ secrets.EMAIL }}
      #       body: The CI pipeline has fail
